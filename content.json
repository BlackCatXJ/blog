{"pages":[],"posts":[{"title":"SSH的应用","text":"SSH的应用1. SSH概要介绍 概述Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。 SSH通过在网络中建立安全隧道（英语：secure channel）来实现SSH客户端与服务器之间的连接。虽然任何网络服务都可以通过SSH实现安全传输，SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。使用频率最高的场合类Unix系统，但是Windows操作系统也能有限度地使用SSH。 在设计上，SSH是Telnet和非安全shell的替代品。Telnet和Berkeley rlogin（英语：rlogin）、rsh、rexec（英语：Remote Process Execution）等协议采用明文传输，使用不可靠的密码，容易遭到监听、嗅探和中间人攻击[4]。SSH旨在保证非安全网络环境（例如互联网）中信息加密完整可靠。 密钥管理在类Unix系统中，已许可登录的公钥通常保存在用户 /home 目录的 ~/.ssh/authorized_keys 文件中，该文件只由SSH使用。当远程机器持有公钥，而本地持有对应私钥时，登录过程不再需要手动输入密码。另外为了额外的安全性，私钥本身也能用密码保护。 私钥会保存在固定位置，也可以通过命令行参数指定（例如ssh命令的“-i”选项）。ssh-keygen是生成密钥的工具之一。 SSH也支持基于密码的身份验证，此时密钥是自动生成的。若客户端和服务端从未进行过身份验证，SSH未记录服务器端所使用的密钥，那么攻击者可以模仿服务器端请求并获取密码，即中间人攻击。但是密码认证可以禁用，而且SSH客户端在发现新密钥或未知服务器时会向用户发出警告。 SSH的安全验证在客户端来看，SSH提供两种级别的安全验证。 第一种级别（基于密码的安全验证），知道帐号和密码，就可以登录到远程主机，并且所有传输的数据都会被加密。但是，可能会有别的服务器在冒充真正的服务器，无法避免被“中间人”攻击。 第二种级别（基于密钥的安全验证），需要依靠密钥，也就是你必须为自己创建一对密钥，并把公有密钥放在需要访问的服务器上。客户端软件会向服务器发出请求，请求用你的密钥进行安全验证。服务器收到请求之后，先在你在该服务器的用户根目录下寻找你的公有密钥，然后把它和你发送过来的公有密钥进行比较。如果两个密钥一致，服务器就用公有密钥加密“质询”（challenge）并把它发送给客户端软件。从而避免被“中间人”攻击。 在服务器端，SSH也提供安全验证。 在第一种方案中，主机将自己的公用密钥分发给相关的客户端，客户端在访问主机时则使用该主机的公开密钥来加密数据，主机则使用自己的私有密钥来解密数据，从而实现主机密钥认证，确保数据的保密性。 在第二种方案中，存在一个密钥认证中心，所有提供服务的主机都将自己的公开密钥提交给认证中心，而任何作为客户端的主机则只要保存一份认证中心的公开密钥就可以了。在这种模式下，客户端必须访问认证中心然后才能访问服务器主机。 摘自维基百科 Secure Shell 2. SSH登录远程服务器由于macOS和linux都提供了SSH，可以直接从终端进行操作 2.1 基于密码的安全验证假定要以用户名user，登录远程主机host 1$ ssh user@host 如果本地用户名和服务器用户名一致的话，可以省略用户名 1$ ssh host SSH的默认端口是22，登录请求会默认请求远程主机的22号端口。可以通过p参数来制定连接的端口号 1$ ssh -p 8888 user@host 登录过程如下图所示 首次登录如果你是第一次登录对方主机，系统会出现下面的提示： 这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？ 所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。 很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。 假定经过风险衡量以后，用户决定接受这个远程主机的公钥。 1Are you sure you want to continue connecting (yes/no)? yes 系统会出现一句提示，表示host主机已经得到认可，并被添加至kown hosts列表里 1Warning: Permanently added '39.107.85.55' (ECDSA) to the list of known hosts. 然后，会要求输入密码。 1root@39.107.85.55's password: 如果密码正确，就可以成功登录了。 known_hosts文件每个SSH用户都有自己的known_hosts文件，当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。 下图为用户目录下的known_hosts文件，可以看到刚才登录的服务器信息已经添加到了文件中。 2.2 基于密钥的安全验证用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码 .ssh 文件夹说明在用户目录的home目录下，有一个.ssh的目录，和当前用户ssh配置认证相关的文件，几乎都在这个目录下。主要有以下相关文件 authorized_keys：存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥 id_rsa：生成的私钥文件 id_rsa.pub：生成的公钥文件 know_hosts：已知的主机公钥清单 文件的权限为了让私钥文件和公钥文件能够在认证中起作用，请确保权限正确。 对于.ssh 以及父文件夹，当前用户用户一定要有执行权限，其他用户最多只能有执行权限。 对于公钥和私钥文件也是: 当前用户一定要有执行权限，其他用户最多只能有执行权限。 对于利用公钥登录，对其他用户配置执行权限是没有问题的。但是对于git，公钥和私钥, 以及config等相关文件的权限，其他用户不可有任何权限。 ssh-keygen 生成的文件名和文件位置ssh-keygen 可用来生成ssh公钥认证所需的公钥和私钥文件。 使用 ssh-keygen 时，请先进入到 ~/.ssh 目录，不存在的话，请先创建。并且保证 ~/.ssh 以及所有父目录的权限不能大于 711 使用 ssh-kengen命令 会在~/.ssh/目录下生成两个文件 不指定文件名和密钥类型的时候，默认生成的两个文件是： id_rsa id_rsa.pub 第一个是私钥文件，第二个是公钥文件。 生成ssh key的时候，不指定参数如下图所示 1$ ssh-keygen 默认生成种类为RSA的密钥对 默认文件名为id_rsa 密钥对默认保存地址为/user_home_path/.ssh/ ssh-keygen 命令参数说明可以通过man ssh-keygen来查询该命令的全参数说明 下面对常见的参数进行说明 1$ ssh-keygen -t rsa -C \"your_email@example.com\" -t dsa | ecdsa | ed25519 | rsa Specifies the type of key to create. The possible values are “dsa’’, “ecdsa’’, “ed25519’’, or “rsa’’. -C comment Provides a new comment. -f filename Specifies the filename of the key file. 远程免密登录同一本地服务器的，地址为localhost，不用重写IP 如果希望ssh公钥生效需满足至少下面两个条件： .ssh目录的权限必须是700 .ssh/authorized_keys文件权限必须是600 将公钥发送给远程服务器有如下几种方式 1. 通过ssh-copy-id的方式1$ ssh-copy-id -i ~/.ssh/id_rsa.pub user@host -i identity_file Use only the key(s) contained in identity_file (rather than looking for identities via ssh-add(1) or in the default_ID_file). If the filename doesnot end in .pub this is added. If the filename is omitted, the default_ID_file is used. Note that this can be used to ensure that the keys copied have the comment one prefers and/or extra options applied, by ensuring that the key file has these set as preferred before the copy is attempted. 不输入-i默认为.ssh/id_rsa.pub 2. 通过scp将内容写到对方的文件中1$ scp -p ~/.ssh/id_rsa.pub user@host:/user_home_path/.ssh/authorized_keys 也可以分两步进行 12345//将文件拷贝至远程服务器$ scp ~/.ssh/id_rsa.pub user@host:pub_key //将内容追加到authorized_keys文件中， 不过要登录远程服务器来执行这条命令$ cat ~/pub_key &gt;&gt; ~/.ssh/authorized_keys 3. 手工复制粘贴的方式将本地id_rsa.pub文件的内容拷贝至远程服务器的~/.ssh/authorized_keys文件中 4. 通过Ansible实现批量免密(未验证)4.1 将需要做免密操作的机器hosts添加到/etc/ansible/hosts下： 1234567[Avoid close]192.168.91.132192.168.91.133192.168.91.134 4.2 执行命令进行免密操作 1ansible &lt;groupname&gt; -m authorized_key -a \"user=root key='{{ lookup('file','/root/.ssh/id_rsa.pub') }}'\" -k 示例： 12345678910111213[root@test sshpass-1.05]# ansible test -m authorized_key -a \"user=root key='{{ lookup('file','/root/.ssh/id_rsa.pub') }}'\" -k SSH password: -----&gt;输入密码 192.168.91.135 | success &gt;&gt; { \"changed\": true, \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEArZI4kxlYuw7j1nt5ueIpTPWfGBJoZ8Mb02OJHR8yGW7A3izwT3/uhkK7RkaGavBbAlprp5bxp3i0TyNxa/apBQG5NiqhYO8YCuiGYGsQAGwZCBlNLF3gq1/18B6FV5moE/8yTbFA4dBQahdtVP PejLlSAbb5ZoGK8AtLlcRq49IENoXB99tnFVn3gMM0aX24ido1ZF9RfRWzfYF7bVsLsrIiMPmVNe5KaGL9kZ0svzoZ708yjWQQCEYWp0m+sODbtGPC34HMGAHjFlsC/SJffLuT/ug/hhCJUYeExHIkJF8OyvfC6DeF7ArI6zdKER7D8M0SM WQmpKUltj2nltuv3w== root@localhost.localdomain\", \"key_options\": null, \"keyfile\": \"/root/.ssh/authorized_keys\", \"manage_dir\": true, \"path\": null, \"state\": \"present\", \"unique\": false, \"user\": \"root\" } 3. SSH登录git repo","link":"/blog/2018/11/20/SSH的应用/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/blog/2018/11/20/hello-world/"},{"title":"hexo的简单实践","text":"","link":"/blog/2018/11/20/hexo的简单实践/"}],"tags":[{"name":"SSH","slug":"SSH","link":"/blog/tags/SSH/"}],"categories":[]}